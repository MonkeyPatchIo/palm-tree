<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rxjava on MonkeyPatch - Expertise Informatique</title>
    <link>http://www.monkeypatch.io/palm-tree/tags/rxjava/</link>
    <description>Recent content in Rxjava on MonkeyPatch - Expertise Informatique</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Fri, 12 Aug 2016 13:47:08 +0200</lastBuildDate>
    
	<atom:link href="http://www.monkeypatch.io/palm-tree/tags/rxjava/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MKTD#1 Feign vs Retrofit - Part 3 - Autres sujets</title>
      <link>http://www.monkeypatch.io/palm-tree/blog/2016/08/12/mktd1-feign-vs-retrofit-3-autres-sujets/</link>
      <pubDate>Fri, 12 Aug 2016 13:47:08 +0200</pubDate>
      
      <guid>http://www.monkeypatch.io/palm-tree/blog/2016/08/12/mktd1-feign-vs-retrofit-3-autres-sujets/</guid>
      <description>&lt;hr /&gt;

&lt;!--image: http://www.monkeypatch.io/public/images/logos/logo-FeignVsRetrofit.png--&gt;

&lt;p&gt;Le but de cet exercice était d’utiliser toutes les solutions possibles, hormis le cache pour améliorer les requêtes.
La JVM ayant plein d&amp;rsquo;astuce d&amp;rsquo;optimisation (comme la compilation en code natif à chaud JIT), il est vite compliqué de faire des benchmarks &amp;lsquo;valable&amp;rsquo; en Java.
La solution la plus simple est d&amp;rsquo;utiliser &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt; qui est la solution &lt;em&gt;officiel&lt;/em&gt; pour la JVM.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>